Documentation:
- Currently the pass goes:
LAZY (-s)
  --Scan--> AST 
  --Curry--> AST 
  --DESUGAR--> AST
  --LAZY--> AST
  --Semant--> SAST 
  --Clconvert--> CAST 
  --Codegen--> LLVM IR

BARE (-l)
  --Scan--> AST 
  --Curry--> AST 
  --DESUGAR--> AST
  --Semant--> SAST 
  --Clconvert--> CAST 
  --Codegen--> LLVM IR

- Case Convert:

- Curry Pass:
    1. curry all lambdas and functions => so that every lambda only has 1 arg
    2. convert the CASE expr of lists to If-Then-Let format
          => because Lazy would convert the type of Let expressions, 
          => ultimately all case conversion need to happen before Lazy pass

- Decision making:
  1. Putting the Lazy before Semant does not require us to carry the type or do type transformation
    - We disccovered that doing Lazy after Semant would need to do a lot of repeated work with types
  2. Separate the Curry pass from Semant
    - Before we will ccurry function in Semant, but this is technically desugaring the so urce code, and will be clear if it is a separate pass.
  3. Remove the type annotation in Let 

- Hacky thing to pay attention to in the future:

    => LAZY pass will add Ast.Thunk node 
    => Ast.Thunk e = (S.Lambda (FUNTY (UNIT_TY, ty e)) ["u])
    => Currently, case expression is not lazy converted 


TODO:
- Debugging: tests/codegen/test.suite.uc => (fact 3) raised "Instruction 4" error??
- SOLVED! cl convert error
  
- Consider having empty list like [int], [string], [bool], etc.. 
    => this will free LET expression from carrying the types in the bindings 
    => which will allow us to do case_convert before LAZY pass (before SEMANT pass)
- IMPLEMENTED 

- Switch gear to pattern matching of Lists and ADT
    => then come back to implement infinite list 
- IN PROGRESS


TODO (DEC 11):
- Consider convert AST to PAST in Desugar
- Consider adding let rec 
- Primitive List pattern only takes in name , 
  pattern like `x :: []` is not supported yet