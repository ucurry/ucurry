*********************************************************
#### uCurry - Scanner and Parser

## Contact
- Alexander Bai (alexander.bai@tufts.edu)
- Vivian Li (yike.li@tufts.edu)
- Stephanie Xu (ziqi.xu@tufts.edu)
- Matt Zhou (chuxuan.zhou@tufts.edu)

## Command lines:

    make                       # to compile and get toplevel compiler executable
    make clean                 # to clean up all the executable or output files

    dune exec ucurry -- -a     # to parse the program and pretty print it
    dune exec ucurry -- -l     # to further include the lazy evaluation pass 
    dune exec ucurry -- -p     # to further include the case expr desugar pass
    dune exec ucurry -- -c     # to further include the closure conversion and rename passes 
    dune exec ucurry -- -s     # to further include the code generation
    dune exec ucurry -- -b     # to generate llvm code without laziness

## Scripts (should be run in the ./scripts directory)
    ./sptest.sh                # to run the tests script for scanner and parser 
    ./typetest.sh              # to run the tests for typechecking
    ./codegen.sh               # to run the tests for codegen
    ./suite.sh                 # to run the integration test suite 

    ./testafile.sh <filename>  # generates the executable for the given file 
                                 name and any intermediate representations
    

# The µcurry Compiler
Coded in OCaml, this compiler takes a minimal functional language and compiles 
it down to LLVM IR. 

## How to compile and execute

In the toplevel directory, run `dune build` to build the compiler. 
Run `dune exec ucurry -- -a` to run the compiler that prints the scanner and
parser roundtrip, which scans and parse input text (program) to structured AST
and pretty-prints back to strings.
Run `dune exec ucurry -- -s` to run the compiler that would produce the 
Llvm code.
Run `dune exec ucurry -- -s < {filename} | lli` to compile the program specified 
by the filename and interpret the program.
Run `dune exec ucurry -- -b < {filename} | lli` to compile the program specified 
by the filename and interpret the program without laziness.

To compile and run a program, you can consult `runafile.sh` in the toplevel 
directory. You can also use this shell script to run a file.

## Test Script for scanning and parsing

To validate our parsing/unparsing roundtrip, we tried to show `(parse o unparse) = id`, 
the reverse may not be true becuase parsing removes comments and unnecessary whitespace.

To verify this, our script runs `unparse o parse o unparse o parse = id`, 
the first `unparse o parse` gives us a trimmed concrete syntax of the µcurry language, and
it should be the same as the output of the second `unparse o parse` pair.

## Test Script for integration tests

For integration testing, we have `suite.sh` that would check all the positive
tests against the golden standard and verify the error messages produced by 
the negative tests.

## Syntax to be added

The syntax of infinite list is subject to change because of some uncertainty of 
the architecture
