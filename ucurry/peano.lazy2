datatype Num = Zero | Addone of Num;
(unit -> Num) zero = \((unit -> Num))unit -> Zero ;
(unit -> Num) one = \((unit -> Num))unit -> Addone (zero ());
if Zero .T == "Addone" 
 then let a = THUNK: Zero @Addone in println0 
 else println1;
printlnif Addone Zero .T == "Addone" 
 then if Addone Zero @Addone.T == "Zero" 
 then 2 
 else 10 
 else 10;
printlnif Addone Addone Zero .T == "Addone" 
 then if Addone Addone Zero @Addone.T == "Addone" 
 then if Addone Addone Zero @Addone@Addone.T == "Zero" 
 then 3 
 else 0 
 else 0 
 else if Addone Addone Zero .T == "Zero" 
 then 2 
 else 0;
